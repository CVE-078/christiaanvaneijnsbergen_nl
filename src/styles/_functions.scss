@function strip-unit($num) {
    @return $num / ($num * 0 + 1);
}

@function convert-to-rem($value, $base-value: $rem-base) {
    $value: strip-unit($value) / strip-unit($base-value) * 1rem;

    @if ($value==0rem) {
        $value: 0;
    }

    @return $value;
}

@function rem-calc($values, $base-value: 16) {
    $max: length($values);

    @if $max==1 {
        @return convert-to-rem(nth($values, 1), $base-value);
    }

    $remValues: ();

    @for $i from 1 through $max {
        $remValues: append(
            $remValues,
            convert-to-rem(nth($values, $i), $base-value)
        );
    }

    @return $remValues;
}

@function map-deep-set($map, $keys, $value) {
    $maps: ($map);
    $result: null;

    @if type-of(nth($keys, -1)) == "map" {
        @warn "The last key you specified is a map; it will be overrided with `#{$value}`.";
    }

    @if length($keys) ==1 {
        @return map-merge(
            $map,
            (
                $keys: $value,
            )
        );
    }

    @for $i from 1 through length($keys) - 1 {
        $current-key: nth($keys, $i);
        $current-map: nth($maps, -1);
        $current-get: map-get($current-map, $current-key);

        @if $current-get==null {
            @error "Key `#{$key}` doesn't exist at current level in map.";
        }

        $maps: append($maps, $current-get);
    }

    @for $i from length($maps) through 1 {
        $current-map: nth($maps, $i);
        $current-key: nth($keys, $i);
        $current-val: if($i==length($maps), $value, $result);
        $result: map-merge(
            $current-map,
            (
                $current-key: $current-val,
            )
        );
    }

    @return $result;
}
